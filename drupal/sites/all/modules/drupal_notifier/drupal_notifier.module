<?php
// $Id: drupal_notifier.module,v 1.2.2.2 2009/09/17 23:07:00 gor Exp $
/********************************************************************
 * Constants
 ********************************************************************/
/**
 * URL to check for updates, if a given project doesn't define its own.
 */
define('DN_UPDATE_DEFAULT_URL', 'http://updates.drupal.org/release-history');

/********************************************************************
 * Drupal Hooks
 ********************************************************************/

/**
 * Implementation of hook_perm().
 */
function drupal_notifier_perm() {
  return array('admin drupal_notifier','get drupal notifier xml');
}



/**
 * Implementation of hook_menu().
 */
function drupal_notifier_menu() {
  $items['drupal_notifier'] = array(
      'page callback'    => 'drupal_notifier_get_plist',
      'access callback'  => 1,      
      'type'             => MENU_CALLBACK,      
    );
  $items['admin/reports/updates/drupal_notifier'] = array(
      'title'            => 'Drupal notifier settings',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('drupal_notifier_settings'),
      'access arguments' => array('admin drupal_notifier'),
      'type'             => MENU_LOCAL_TASK,      
    );

  return $items;
}


/********************************************************************
 * Other Functions
 ********************************************************************/
 function drupal_notifier_get_project_updates(&$project){
   global $base_url;
   
   $url = variable_get('update_fetch_url', DN_UPDATE_DEFAULT_URL).'/'. $project['name'] .'/'. $project['core'];
   
   $site_key = md5($base_url . drupal_get_private_key());
   if (!empty($site_key)) {
     $url .= (strpos($url, '?') === TRUE) ? '&' : '?';
     $url .= 'site_key='.drupal_urlencode($site_key);

     if (!empty($project['version'])) {
       $url .= '&version='.drupal_urlencode($project['version']);
     }
   }
   $xml = drupal_http_request($url);
   if (isset($xml->data)) {
     $data = $xml->data;
   }


   if ($data) {
    $parser = new dn_update_xml_parser;
    $available = $parser->parse($data);
   }
   if (isset($available['project_status'])) {
			switch ($available['project_status']) {
          case 'insecure':
            $project['status'] = 'security-error';
            break;
          case 'unpublished':
          case 'revoked':
            $project['status'] = 'remove';
            break;
          case 'unsupported':
            $project['status'] = 'notsupported';
            break;
      }
   }
   
   // Figure out the target major version.
   $existing_major = $project['existing_major'];
   $supported_majors = array();
   
   if (isset($available['supported_majors'])) {
     $supported_majors = explode(',', $available['supported_majors']);
   }elseif (isset($available['default_major'])) {
     // Older release history XML file without supported or recommended.
     $supported_majors[] = $available['default_major'];
   }

   if (in_array($existing_major, $supported_majors)) {
   
      $target_major = $existing_major;
      
   }elseif (isset($available['recommended_major'])) {
   
      $target_major = $available['recommended_major'];
      $project['status'] = 'notsupported';
      
   }elseif (isset($available['default_major'])) {
   
      $target_major = $available['default_major'];
      
   }else {
   
      $target_major = $existing_major;
   }

   $target_major = max($existing_major, $target_major);

   if (empty($available['releases'])) {
     $project['status'] = 'unknow';
     $project['status_message'] = 'releases is empty';
     return '';   
   }      
      
   $version_patch_changed = '';
   $patch = '';      
      
   foreach ($available['releases'] as $version => $release) {
     // First, if this is the existing release, check a few conditions.
     if ($project['version'] === $version) {
       if (isset($release['terms']['Release type']) && in_array('Insecure', $release['terms']['Release type'])) {
       
         $project['status'] = 'security-error';
         
       }elseif ($release['status'] == 'unpublished') {
       
         $project['status'] = 'remove';
         
       }elseif (isset($release['terms']['Release type']) && in_array('Unsupported', $release['terms']['Release type'])) {
       
            $project['status'] = 'notsupported';
       }
     }

     // Otherwise, ignore unpublished, insecure, or unsupported releases.
     if ($release['status'] == 'unpublished' || (isset($release['terms']['Release type']) && (in_array('Insecure', $release['terms']['Release type']) || in_array('Unsupported', $release['terms']['Release type'])))) {
       continue;
     }

     // See if this is a higher major version than our target and yet still
     // supported. If so, record it as an "Also available" release.
     
     if ($release['version_major'] > $target_major) {
       if (in_array($release['version_major'], $supported_majors)) {
         if (!isset($available['also'])) {
              $available['also'] = array();
         }
         if (!isset($available['also'][$release['version_major']])) {
           $available['also'][$release['version_major']] = $version;
         }
       }
       continue;
     }

     // Look for the 'latest version' if we haven't found it yet. Latest is
     // defined as the most recent version for the target major version.
     if (!isset($available['latest_version']) && $release['version_major'] == $target_major) {
       $available['latest_version'] = $version;
     }

     // Look for the development snapshot release for this branch.
     if (!isset($available['dev_version']) && $release['version_major'] == $target_major && isset($release['version_extra']) && $release['version_extra'] == 'dev') {
       $available['dev_version'] = $version;
     }

     // Look for the 'recommended' version if we haven't found it yet (see
     // phpdoc at the top of this function for the definition).
    if (!isset($available['recommended']) && $release['version_major'] == $target_major && isset($release['version_patch'])) {
      if ($patch != $release['version_patch']) {
         $patch = $release['version_patch'];
         $version_patch_changed = $release['version'];
      }
      if (empty($release['version_extra']) && $patch == $release['version_patch']) {
         $available['recommended'] = $version_patch_changed;
      }
    }

    // Stop searching once we hit the currently installed version.
    if ($project['version'] === $version) {
      break;
    }

    // See if this release is a security update.
    if (isset($release['terms']['Release type']) && in_array('Security update', $release['terms']['Release type'])) {
      $available['security updates'][] = $release;
    }
  }//foreach      

  // If we were unable to find a recommended version, then make the latest
  // version the recommended version if possible.
  if (!isset($available['recommended']) && isset($available['latest_version'])) {
    $available['recommended'] = $available['latest_version'];
  }

  //
  // Check to see if we need an update or not.
  //

  if (!empty($available['security updates'])) {
    // If we found security updates, that always trumps any other status.
    $project['status'] = 'security-error';
  }

  if (!isset($project['status'])) {

  // If we don't know what to recommend, there's nothing we can report.
  // Bail out early.
  if (!isset($available['recommended'])) {
    $project['status'] = 'unknow';
  }

  // If we're running a dev snapshot, compare the date of the dev snapshot
  // with the latest official version, and record the absolute latest in
  // 'latest_dev' so we can correctly decide if there's a newer release
  // than our current snapshot.
  if ($project['install_type'] == 'dev') {
    if (isset($available['dev_version']) && $available['releases'][$available['dev_version']]['date'] > $available['releases'][$available['latest_version']]['date']) {
      $available['latest_dev'] = $available['dev_version'];
    }else {
      $available['latest_dev'] = $available['latest_version'];
    }
  }

  // Figure out the status, based on what we've seen and the install type.
  switch ($project['install_type']) {
    case 'official':
      if ($project['version'] === $available['recommended'] || $project['version'] === $available['latest_version']) {
        $project['status'] = 'ok';
      }else {
        $project['status'] = 'update';
      }
      break;

    case 'dev':
      $latest = $available['releases'][$available['latest_dev']];
      if (empty($project['datestamp'])) {
        $project['status'] = 'notchecked';
      }elseif (($project['datestamp'] + 100 > $latest['date'])) {
        $project['status'] = 'ok';
      }else {
        $project['status'] = 'update';
      }
      
      break;

      default:
        $project['status'] = 'unknow';
      }
      
  }   
  $rec = '';  
  if($available['recommended']){
    $recom=$available['releases'][$available['recommended']];
    $rec .= '
					<dict>
						<key>version</key>
						<string>'.$recom['version'].'</string>
						<key>date</key>
						<string>'.$recom['date'].'</string>
						<key>release_link</key>
						<string>'.$recom['release_link'].'</string>
						<key>recomended</key>
						<true/>
					</dict>';
  };
  if($available['also']){
    foreach($available['also'] as $ver){
      $recom=$available['releases'][$ver];
      $rec .= '
					<dict>
						<key>version</key>
						<string>'.$recom['version'].'</string>
						<key>date</key>
						<string>'.$recom['date'].'</string>
						<key>release_link</key>
						<string>'.$recom['release_link'].'</string>
					</dict>';
    }
  }
  if(!empty($rec)){
    $project['updates'] = '<array>'.$rec."\n				</array>";
  }
//   $project['status'] = 'error';  // error, ok, update,remove, notsupported   
 }
 
 
function drupal_notifier_render_modules_list(){
  $files = module_rebuild_cache();
  $projects=array();
  foreach($files as $module){
    if(empty($projects[$module->info['project']])&& $module->status ){
      $install_type = 'official';
      if (preg_match('@(dev|HEAD)@', $module->info['version'])) {
        $install_type = 'dev';
      }
      $matches = array();
      if (preg_match('/^(\d+\.x-)?(\d+)\..*$/', $module->info['version'], $matches)) {
        $major = $matches[2];
      }
      elseif (!isset($major)) {
        $major = -1;
      }
      if(!empty($module->info['project'])){
        $project = array ('version' => $module->info['version'],
      									'core' => $module->info['core'],
      									'name' => $module->info['project'],
      									'install_type' => $install_type,
      									'existing_major' => $major,
      									'datestamp' => $module->info['datestamp'],
      									'updates' => '<array/>');
	  		drupal_notifier_get_project_updates($project);
		  	$projects[$module->info['project']] = $project;      									
		  }
    }
    
  }
  $res='';  
  foreach($projects as $project){
    $res.='
			<dict>
				<key>name</key>
				<string>'.$project['name'].'</string>
				<key>version</key>
				<string>'.$project['version'].'</string>
				<key>status</key>
				<string>'.$project['status'].'</string>
				<key>updates</key>
				'.$project['updates'].'
			</dict>
';
  }
  
  if(!empty($res)){
    $res='<array>'."\n".$res."\n".'</array>';
  }else{
    $res='<array/>';
  }
  return $res;  
}


function drupal_notifier_get_plist(){
  $login=$_POST['login'];
  $pass=$_POST['password'];

  $account = user_load(array('name' => $login, 'pass' => $pass, 'status' => 1));
  if (user_access('get drupal notifier xml',$account)){
    $icon_path ='';
    $theme_settings = theme_get_settings(variable_get('theme_default',''));
    switch(variable_get('drupal_notifier_icon', '')){
      case 'upload':
      				$file=db_fetch_object(db_query("SELECT * FROM {files} WHERE fid = '%d'", variable_get('drupal_notifier_icon_fid','')));
    	  			$icon_path=url($file->filepath,array('absolute' => true));
    		  	break;
      case 'favicon':
            if(!empty($theme_settings['favicon_path'])){
            	$icon_path=url($theme_settings['favicon_path'],array('absolute' => true));
    		  	}
      case 'theme_logo':
            if(!empty($theme_settings['logo_path'])){
            	$icon_path=url($theme_settings['logo_path'],array('absolute' => true));
    		  	}
      default: 
            if(!empty($theme_settings['logo_path'])){
            	$icon_path=url($theme_settings['logo_path'],array('absolute' => true));
    		  	}
    
    }
print('<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>status</key>
  	<string>ok</string>		
		<key>status text</key>
  	<string>Access granted</string>		
		<key>name</key>
  	<string>'.variable_get('site_name','Drupal site').'</string>		
		<key>version</key>
  	<string>'.VERSION.'</string>		
		<key>iconURL</key>
  	<string>'.$icon_path.'</string>		
		<key>modules</key>
		'.drupal_notifier_render_modules_list().'
	</dict>		
</plist>');

  }else{
print('<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>status</key>
  	<string>error</string>		
		<key>status text</key>
  	<string>Access denied</string>		
	</dict>		
</plist>');

  }
  exit();
}
function drupal_notifier_settings(){
   drupal_add_js(drupal_get_path('module', 'drupal_notifier') .'/drupal_notifier.js', 'module');
 
  $options=array(
    'favicon' => t('use favicon'),
    'theme_logo' => t('use current theme logo'),
    'upload' => t('upload custom'),
  );
   
  $form['drupal_notifier_icon'] = array(
    '#type' => 'radios',
    '#title' => t('Icon'),
    '#default_value' => variable_get('drupal_notifier_icon', ''),
    '#options' => $options,
    '#description' => t('Please choose an icon to be displayed in Drupal notifier')
    
  );
  
  $fid = variable_get('drupal_notifier_icon_fid','');
  
  if(variable_get('drupal_notifier_icon', '') == 'upload' && !empty($fid) ){
    $file=db_fetch_object(db_query("SELECT * FROM {files} WHERE fid = '%d'", variable_get('drupal_notifier_icon_fid','')));
    $form['icon_preview']= array (
      '#type' => 'markup',
      '#value' => theme('image',$file->filepath)
    );
  }
  
  $form['upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload image file'),
    '#description' => t("Use this field to upload your flexblock page image.")
  );
  
   $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  
  $form['#attributes']['enctype'] = 'multipart/form-data';  

  return $form;
}


function drupal_notifier_settings_submit($form, &$form_state){

 	$tmp_path=file_directory_path() .'/'. variable_get('drupal_notifier', 'drupal_notifier');
  if($form_state['values']['drupal_notifier_icon'] == 'upload' && variable_get('drupal_notifier_icon', '') != 'upload'){
	  file_check_directory($tmp_path, FILE_CREATE_DIRECTORY);
  	$file = file_save_upload('upload', $validators, $tmp_path);
    if(!empty($file)){
      file_set_status($file, FILE_STATUS_PERMANENT);
    }  
    variable_set('drupal_notifier_icon_fid',$file->fid);
  }elseif($form_state['values']['drupal_notifier_icon'] == 'upload' && variable_get('drupal_notifier_icon', '') == 'upload' && $file = file_save_upload('upload', $validators, $tmp_path)){
  		$fileold=db_fetch_object(db_query("SELECT * FROM {files} WHERE fid = '%d'", variable_get('drupal_notifier_icon_fid','')));
  		file_delete($fileold->filepath);
      db_query("DELETE FROM {files} WHERE fid = '%d'", $fileold->fid); 
      file_set_status($file, FILE_STATUS_PERMANENT);
      variable_set('drupal_notifier_icon_fid',$file->fid);
  }elseif($form_state['values']['drupal_notifier_icon'] != 'upload' && variable_get('drupal_notifier_icon', '') == 'upload'){
  		$fileold=db_fetch_object(db_query("SELECT * FROM {files} WHERE fid = '%d'", variable_get('drupal_notifier_icon_fid','')));
  		file_delete($fileold->filepath);
      db_query("DELETE FROM {files} WHERE fid = '%d'", $fileold->fid); 
      variable_set('drupal_notifier_icon_fid','');
  }
  variable_set('drupal_notifier_icon',$form_state['values']['drupal_notifier_icon']);
  
}


/**
 * XML Parser object to read Drupal's release history info files.
 * This uses PHP4's lame XML parsing, but it works.
 */
class dn_update_xml_parser {
  var $projects = array();
  var $current_project;
  var $current_release;
  var $current_term;
  var $current_tag;
  var $current_object;

  /**
   * Parse an array of XML data files.
   */
  function parse($datum) {
    $parser = xml_parser_create();
    xml_set_object($parser, $this);
    xml_set_element_handler($parser, 'start', 'end');
    xml_set_character_data_handler($parser, "data");
    xml_parse($parser, $datum);
    xml_parser_free($parser);
    return $this->projects;
  }

  function start($parser, $name, $attr) {
    $this->current_tag = $name;
    switch ($name) {
      case 'PROJECT':
        unset($this->current_object);
        $this->current_project = array();
        $this->current_object = &$this->current_project;
        break;
      case 'RELEASE':
        unset($this->current_object);
        $this->current_release = array();
        $this->current_object = &$this->current_release;
        break;
      case 'TERM':
        unset($this->current_object);
        $this->current_term = array();
        $this->current_object = &$this->current_term;
        break;
    }
  }

  function end($parser, $name) {
    switch ($name) {
      case 'PROJECT':
        unset($this->current_object);
        $this->projects = $this->current_project;
        $this->current_project = array();
        break;
      case 'RELEASE':
        unset($this->current_object);
        $this->current_project['releases'][$this->current_release['version']] = $this->current_release;
        break;
      case 'RELEASES':
        $this->current_object = &$this->current_project;
        break;
      case 'TERM':
        unset($this->current_object);
        $term_name = $this->current_term['name'];
        if (!isset($this->current_release['terms'])) {
          $this->current_release['terms'] = array();
        }
        if (!isset($this->current_release['terms'][$term_name])) {
          $this->current_release['terms'][$term_name] = array();
        }
        $this->current_release['terms'][$term_name][] = $this->current_term['value'];
        break;
      case 'TERMS':
        $this->current_object = &$this->current_release;
        break;
      default:
        $this->current_object[strtolower($this->current_tag)] = trim($this->current_object[strtolower($this->current_tag)]);
        $this->current_tag = '';
    }
  }

  function data($parser, $data) {
    if ($this->current_tag && !in_array($this->current_tag, array('PROJECT', 'RELEASE', 'RELEASES', 'TERM', 'TERMS'))) {
      $tag = strtolower($this->current_tag);
      if (isset($this->current_object[$tag])) {
        $this->current_object[$tag] .= $data;
      }
      else {
        $this->current_object[$tag] = $data;
      }
    }
  }
}


