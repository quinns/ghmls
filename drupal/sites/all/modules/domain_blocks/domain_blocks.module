<?php
// $Id: domain_blocks.module,v 1.3 2009/04/30 01:02:35 nonsie Exp $

/**
 * @file
 * Provides domain specific visibility settings for blocks based on user domain access settings
 * Domain Blocks does not define any permissions of its own yet it requires user to have
 * set domain access permission in order to define any domain based visibility settings.
 */

/**
 * Implementation of hook_help().
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function domain_blocks_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#domain_blocks":
      $output = '<p>'.  t("Provides domain specific visibility settings for blocks") .'</p>';
      break;
  }
  return $output;
}

/**
 * Save domain block data
 * @param string $delta
 * @param string $delta
 * @param array $domain_arr
 */
function domain_blocks_save($module, $delta, $domain_arr) {
  $domain_blocks_saved = _domain_blocks_with_realm_load($module, $delta);
  // Unset blocks relationship with any domains
  if (empty($domain_blocks_saved)) {
    if (!empty($domain_arr)) {
      $realm = 'domain_id';
      foreach ($domain_arr as $single_domain_id => $enabled) {
        db_query("INSERT INTO {domain_blocks}(module, delta, realm, domain_id) VALUES('%s', '%s', '%s', %d)", $module, $delta, $realm, $single_domain_id);
      }
    }
    else {
      // Block is visible on all domains (domain_site grant)
      $realm = 'domain_site';
      db_query("INSERT INTO {domain_blocks}(module, delta, realm, domain_id) VALUES('%s', '%s', '%s', %d)", $module, $delta, $realm, 0);
    }
  }
  else {
    // Visible on all domains + adding individual domain based perms
    if (isset($domain_blocks_saved['domain_site']) && !empty($domain_arr)) {
      // remove domain_site grant - block visibility is defined by individual domains
      $realm = 'domain_site';
      db_query("DELETE FROM {domain_blocks} WHERE module = '%s' AND delta = '%s' AND realm = '%s' AND domain_id IN ('%s')", $module, $delta, $realm, 0);
    }
    if (isset($domain_blocks_saved['domain_id'])) {
      // Loop over domain ids already saved
      $domain_count_saved = count($domain_blocks_saved['domain_id']);
      $existing = $domain_blocks_saved['domain_id'];
      if (!empty($domain_arr)) {
        foreach ($domain_blocks_saved['domain_id'] as $key => $val) {
          if (array_key_exists ($key, $domain_arr)) {
            unset($existing[$key]);
            unset($domain_arr[$key]);
          }
        }
      }
      // Remove domain grants no longer used
      $num_to_be_removed = count($existing);
      $domain_count_saved = $domain_count_saved - $num_to_be_removed;
      if ($num_to_be_removed > 0) {
        $domains_to_be_removed = implode(', ', array_keys($existing));
        $realm = 'domain_id';
        db_query("DELETE FROM {domain_blocks} WHERE module = '%s' AND delta = '%s' AND realm = '%s' AND domain_id IN (%s)", $module, $delta, $realm, $domains_to_be_removed);
      }
      if (!empty($domain_arr)) {
        $realm = 'domain_id';
        foreach ($domain_arr as $single_domain_id => $enabled) {
          db_query("INSERT INTO {domain_blocks}(module, delta, realm, domain_id) VALUES('%s', '%s', '%s', %d)", $module, $delta, $realm, $single_domain_id);
        }
      }
      // No domain specific block vivibility settings, must be a grant all
      if ($domain_count_saved == 0) {
        $realm = 'domain_site';
        db_query("INSERT INTO {domain_blocks}(module, delta, realm, domain_id) VALUES('%s', '%s', '%s', %d)", $module, $delta, $realm, 0);
      }
    }
    else {
      // No previous domain based grants, let's set those up now
      if (!empty($domain_arr)) {
        $realm = 'domain_id';
          foreach ($domain_arr as $single_domain_id => $enabled) {
            db_query("INSERT INTO {domain_blocks}(module, delta, realm, domain_id) VALUES('%s', '%s', '%s', %d)", $module, $delta, $realm, $single_domain_id);
          }
      }
    }
  }
}

/**
 * Implementation of block form_alter().
 */
function domain_blocks_form_alter(&$form, $form_state, $form_id) {
  if (($form_id == 'block_admin_configure' || $form_id == 'block_box_form' || $form_id == 'block_add_block_form')) {
    // If the user is a site admin, show the form, otherwise pass it silently.
    if (user_access('set domain access')) {
      $module = $form['module']['#value'];
      $delta = $form['delta']['#value'];
      $form['domain_vis_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Domain specific visibility settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => 0,
      );
      $block_domains = _domain_blocks_load($module, $delta, 'domain_id');
      $options = array();
      foreach (domain_domains() as $data) {
        // Cannot pass zero in checkboxes.
        ($data['domain_id'] == 0) ? $key = -1 : $key = $data['domain_id'];
        // The domain must be valid.
        if ($data['valid'] || user_access('administer domains')) {
          $options[$key] = $data['sitename'];
        }
      }
      $form['domain_vis_settings']['domain_blocks'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Display on'),
        '#options' => $options,
        '#required' => FALSE,
        '#description' => t('Limit block display to these affiliates. This block is visible on all domains by default using this theme.'),
        '#default_value' => $block_domains,
      );
      $form['#submit'][] = 'domain_blocks_form_submit';
    }
  }
}

/**
 * Forms api callback. Submit function
 */
function domain_blocks_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  // Delta may be zero for other modules than block.
  if (!$values['delta'] && $values['module'] == 'block') {
    $values['delta'] = db_result(db_query("SELECT MAX(bid) FROM {boxes}"));
  }
  $enabled_domains = array();
  if (!empty($values['domain_blocks'])) {
    foreach ($values['domain_blocks'] as $single_domain_id => $domain_enabled) {
      if ($domain_enabled != 0) {
        if ($single_domain_id == -1) {
          $single_domain_id = 0;
        }
        $enabled_domains[$single_domain_id] = 1;
      }
    }
  }
  domain_blocks_save($values['module'], $values['delta'], $enabled_domains);
}

/**
 * Implementation of hook_db_rewrite_sql().
 */
function domain_blocks_db_rewrite_sql($query, $primary_table, $primary_key, $args) {
  global $_domain;
  if ($primary_table == 'b' && $primary_key == 'bid') {
    $result['join'] .= " INNER JOIN {domain_blocks} db ON db.module = b.module ";
    $result['where'] .= " db.delta = b.delta ";
    $result['where'] .= " AND ((db.realm = 'domain_site' AND db.domain_id = 0) OR (db.realm = 'domain_id' AND db.domain_id = ". $_domain['domain_id'] ."))";
    return $result;
  }
}

/**
 * Look up domain blocks based on block module and delta
 *
 * @param string $module
 * @param string $delta
 * @return array
 */
function _domain_blocks_domain_lookup($module = NULL, $delta = NULL) {
  $result = array();
  if (!is_null($module) && !is_null($delta)) {
    $result = db_fetch_array(db_query("SELECT domain_id from {domain_blocks} WHERE module = '%s' AND delta = '%s'", $module, $delta));
  }
  return $result;
}

function _domain_blocks_load($module, $delta, $realm = NULL) {
  $block = array();
  if (!empty($realm)) {
    $result = db_query("SELECT domain_id FROM {domain_blocks} WHERE module = '%s' AND delta = '%s' AND realm = '%s'", $module, $delta, $realm);
  }
  else {
    $result = db_query("SELECT domain_id FROM {domain_blocks} WHERE module = '%s' AND delta = '%s'", $module, $delta);
  }
  while ($row = db_fetch_array($result)) {
    if ($row['domain_id'] == 0) {
      $row['domain_id'] = -1;
    }
    $block[] = $row['domain_id'];
  }
  return $block;
}

function _domain_blocks_with_realm_load($module, $delta) {
  $block = array();
  $result = db_query("SELECT domain_id, realm FROM {domain_blocks} WHERE module = '%s' AND delta = '%s'", $module, $delta);
  while ($row = db_fetch_array($result)) {
    $block[$row['realm']][$row['domain_id']] = 1;
  }
  return $block;
}

/**
 * Implementation of hook_domainupdate().
 */
function domain_blocks_domainupdate($op, $domain, $edit = array()) {
 switch ($op) {
    case 'delete':
      // remove records
      _domain_blocks_delete($domain);
    case 'update':
    case 'insert':
    default:
    break;
 }
}

function _domain_blocks_delete($domain) {
  db_query("DELETE FROM {domain_blocks} WHERE domain_id = %d AND realm = 'domain_id'", $domain['domain_id']);
}