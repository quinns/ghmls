<?php
// $Id: transformations_ui.module,v 1.8 2009/06/17 23:43:30 jpetso Exp $
/**
 * @file
 * Transformations UI -
 * An interface for managing transformation pipelines.
 *
 * Copyright 2009 by Jakob Petsovits ("jpetso", http://drupal.org/user/56020)
 */

define('TRANSFORMATIONS_UI_FORM_CREATE', FALSE);


/**
 * Implementation of hook_theme().
 */
function transformations_ui_theme() {
  return array(
    'transformations_ui_operation_block' => array(
      'arguments' => array(
        'pipeline' => NULL, 'operationId' => NULL, 'operationSpec' => NULL,
      ),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function transformations_ui_menu() {
  $items = array();
  $base = array(
    'page callback' => 'drupal_get_form',
    'file' => 'transformations_ui.admin.inc',
    'access arguments' => array('administer data transformation pipelines'),
  );

  $items['admin/build/transformations'] = array(
    'title' => 'Transformation pipelines',
    'description' => 'Construct and manage data transformation pipelines.',
    'page arguments' => array('transformations_ui_pipelines_list'),
    'type' => MENU_NORMAL_ITEM,
  ) + $base;
  $items['admin/build/transformations/list'] = array(
    'title' => 'List',
    'description' => 'Manage existing pipelines.',
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/build/transformations/add'] = array(
    'title' => 'Add',
    'description' => 'Create a new pipeline.',
    'page arguments' => array('transformations_ui_pipeline_rename', TRANSFORMATIONS_UI_FORM_CREATE),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/build/transformations/%transformations_ui_persisted_pipeline'] = array(
    'title callback' => 'transformations_ui_pipeline_title_callback',
    'title arguments' => array(3),
    'page arguments' => array('transformations_ui_pipeline_edit', 3),
    'file' => 'transformations_ui.pipeline.edit.inc',
    'type' => MENU_CALLBACK,
  ) + $base;
  $items['admin/build/transformations/%transformations_ui_persisted_pipeline/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit and connect operations',
    'page arguments' => array('transformations_ui_pipeline_edit', 3),
    'file' => 'transformations_ui.pipeline.edit.inc',
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ) + $base;
  $items['admin/build/transformations/%transformations_ui_persisted_pipeline/add-operation'] = array(
    'title' => 'Add operation',
    'description' => 'Add a new operation to this pipeline',
    'page arguments' => array('transformations_ui_pipeline_operation_add', 3),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/build/transformations/%transformations_ui_persisted_pipeline/remove-operation/%'] = array(
    'title' => 'Remove operation from pipeline',
    'page callback' => 'transformations_ui_pipeline_operation_remove',
    'page arguments' => array(3, 5),
    'file' => 'transformations_ui.pipeline.edit.inc',
    'type' => MENU_CALLBACK,
  ) + $base;
  $items['admin/build/transformations/%transformations_ui_persisted_pipeline/rename'] = array(
    'title' => 'Rename',
    'description' => 'Assign a different name to this pipeline',
    'page arguments' => array('transformations_ui_pipeline_rename', 3),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/build/transformations/%transformations_ui_persisted_pipeline/execute'] = array(
    'title' => 'Execute',
    'description' => 'Run this pipeline with custom-supplied parameters.',
    'page arguments' => array('transformations_ui_pipeline_execute', 3),
    'weight' => 7,
    'type' => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/build/transformations/%transformations_ui_persisted_pipeline/unlock'] = array(
    'title' => 'Edit pipeline',
    'page arguments' => array('transformations_ui_pipeline_unlock_confirm', 3),
    'type' => MENU_CALLBACK,
  ) + $base;
  $items['admin/build/transformations/%transformations_ui_persisted_pipeline/delete'] = array(
    'title' => 'Delete pipeline',
    'page arguments' => array('transformations_ui_pipeline_delete_confirm', 3),
    'type' => MENU_CALLBACK,
  ) + $base;

  $items['transformations/slot-connect/%transformations_ui_persisted_pipeline/%/%/%/%'] = array(
    'title' => 'transformations_ajax_disconnect',
    'page callback' => 'transformations_ui_pipeline_operation_slot_connect',
    'page arguments' => array(2, 3, 4, 5, 6),
    'type' => MENU_CALLBACK,
    'file' => 'transformations_ui.pipeline.edit.inc',
  ) + $base;
  $items['transformations/slot-disconnect/%transformations_ui_persisted_pipeline/%/%/%'] = array(
    'title' => 'transformations_ajax_disconnect',
    'page callback' => 'transformations_ui_pipeline_operation_slot_disconnect',
    'page arguments' => array(2, 3, 4, 5),
    'type' => MENU_CALLBACK,
    'file' => 'transformations_ui.pipeline.edit.inc',
  ) + $base;

  // Ajax callbacks.
  $items['transformations/ajax/position-save/%transformations_ui_persisted_pipeline'] = array(
    'page callback' => 'transformations_ui_pipeline_operation_position_save',
    'page arguments' => array(3), // too many args to specify (menu system limitation)
    'type' => MENU_CALLBACK,
    'file' => 'transformations_ui.pipeline.edit.inc',
  ) + $base;

  return $items;
}

function transformations_ui_pipeline_title_callback(TfPipeline $pipeline) {
  return check_plain($pipeline->name());
}

/**
 * Return an array of pipeline options, with the pipeline id as array key and
 * the pipeline name (guarded with check_plain()) as array value.
 */
function transformations_ui_pipeline_options() {
  $result = db_query("SELECT pipeline_id, name FROM {transformations_pipeline}");
  $options = array();

  while ($pipeline = db_fetch_object($result)) {
    $options[$pipeline->pipeline_id] = check_plain($pipeline->name);
  }
  return $options;
}

/**
 * Retrieve a valid persistence identifier for a given pipeline, or FALSE if
 * the pipeline is neither persisted nor stored in the database.
 */
function transformations_ui_pipeline_persistence_id(TfPipeline $pipeline) {
  $id = $pipeline->property('transformations_ui_persistence_id');
  return isset($id) ? $id : $pipeline->id();
}

/**
 * Pipelines are not directly written to the database by most of the forms,
 * because they should only be saved when the user presses "Save" on the
 * overall pipeline edit form. Forms for editing pipeline details, like
 * the operation edit form, will only cause the pipeline being persisted into
 * a temporary pipeline cache where it can be modified without being written
 * to the database immediately.
 *
 * This function loads the pipeline from that persisted pipeline cache, given
 * the persistence id (a random string used as cache key) as argument.
 * If the persistence id is not given, it is fetched from arg(3).
 *
 * Can also be used as menu wildcard loader.
 */
function transformations_ui_persisted_pipeline_load($persistence_id = NULL) {
  $id = isset($persistence_id) ? $persistence_id : arg(3);

  ctools_include('object-cache');
  $pipeline = ctools_object_cache_get('transformations_ui_pipeline', $id);

  if (is_object($pipeline)) {
    return $pipeline;
  }
  if (is_numeric($id)) {
    return TfPipeline::load($id);
  }
  return FALSE;
}

/**
 * Persist a pipeline into the pipeline cache, and lock it so that other
 * sessions are not allowed to modify the same pipeline. (This is done in order
 * to prevent simultaneous edits with potential data loss on one side.)
 *
 * As long as the pipeline is persisted in the pipeline cache, the persistence
 * identifier (used by transformations_ui_persisted_pipeline_load()) can be
 * retrieved using transformations_ui_pipeline_persistence_id().
 */
function transformations_ui_pipeline_persist(TfPipeline $pipeline) {
  $id = $pipeline->property('transformations_ui_persistence_id');

  if (!isset($id)) {
    // id for yet unstored pipelines: random string, but without path clashes.
    $id = $pipeline->id() ? $pipeline->id() : 'np' . user_password(8);
    $pipeline->setProperty('transformations_ui_persistence_id', $id);
  }
  ctools_include('object-cache');
  ctools_object_cache_set('transformations_ui_pipeline', $id, $pipeline);
}

/**
 * Save a pipeline to the database and remove locks that have been created
 * for the pipeline cache.
 */
function transformations_ui_pipeline_save(TfPipeline $pipeline) {
  $id = transformations_ui_pipeline_persistence_id($pipeline);

  if ($id) {
    ctools_include('object-cache');
    ctools_object_cache_clear_all('transformations_ui_pipeline', $id);
  }
  // Unset the lock, we don't want that stored in the database permanently.
  $pipeline->setProperty('transformations_ui_persistence_id', NULL);
  $pipeline->save();
}

/**
 * Discard changes that were made to a pipeline by removing it from the
 * pipeline cache and clearing any locks that may have been held.
 */
function transformations_ui_pipeline_discard(TfPipeline $pipeline) {
  $id = transformations_ui_pipeline_persistence_id($pipeline);

  if ($id) {
    ctools_include('object-cache');
    ctools_object_cache_clear_all('transformations_ui_pipeline', $id);
  }
  $pipeline->setProperty('transformations_ui_persistence_id', NULL);
}

/**
 * Return the menu path for the given pipeline's overview/edit form,
 * which is the base path for all the other pipeline detail editing forms.
 * Only works for pipelines that are persisted and/or stored in the database.
 */
function transformations_ui_pipeline_path(TfPipeline $pipeline) {
  $id = $pipeline->property('transformations_ui_persistence_id');
  if (!isset($id)) {
    $id = $pipeline->id();
  }
  return 'admin/build/transformations/' . $id;
}

/**
 * Check if the given @p $pipeline is locked, and if so, emit a message that
 * the lock is held, therefore the pipeline cannot be modified, and how to
 * break the lock. This message will be output once per request at maximum.
 *
 * @return
 *   TRUE if the pipeline is locked, or FALSE if no lock is held.
 */
function transformations_ui_is_pipeline_locked(TfPipeline $pipeline) {
  static $message_shown = FALSE;
  $other_user = ctools_object_cache_test('transformations_ui_pipeline',
    transformations_ui_pipeline_persistence_id($pipeline)
  );

  if (!empty($other_user)) {
    $account = user_load($other_user->uid);
    if (!$account) {
      $account = (object) array('uid' => 0, 'name' => t('<unknown>'));
    }
    if (!$message_shown) {
      $message_shown = TRUE;
      drupal_set_message(t('The pipeline is currently being edited by user !username and therefore cannot be modified. Click !unlock-link to break the lock.', array('!username' => theme('username', $account), '!unlock-link' => l(t('here'), transformations_ui_pipeline_path($pipeline) . '/unlock'))));
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Submit callback for a button with but redirection functionality.
 */
function transformations_ui_goto_submit($form, &$form_state) {
  $form_state['redirect'] = $form_state['clicked_button']['#goto_path'];
}

/**
 * Implementation of hook_cron():
 * Clean out old pipeline cache entries, presumably those have been left over
 * haven't been saved or canceled editing.
 */
function transformations_ui_cron() {
  ctools_include('object-cache');
  ctools_object_cache_clean();
}

/**
 * Implementation of hook_perm().
 */
function transformations_ui_perm() {
  return array('administer data transformation pipelines');
}
